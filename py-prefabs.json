{"SMA": {"names": ["Simple Moving Average", "SMA"], "code": "\"\"\"\n @legend: SMA($ticker)\n @name: Simple Moving Average|SMA\n @description: Mean of rolling window\n\"\"\"\ndef main(df,period=5):\n    return df['Close'].rolling(window=period).mean()", "parameters": {"period": "5"}, "description": "Mean of rolling window"}, "RSI": {"parameters": {"period": 14}, "names": ["Relative Strength Index", "RSI"], "code": "\"\"\"\n @legend: RSI($ticker)\n @name: Relative Strength Index|RSI\n\"\"\"\ndef main(df,period=14):\n delta = df['Close'].diff()\n gain = delta.where(delta > 0, 0)\n loss = -delta.where(delta < 0, 0)\n\n avg_gain = gain.rolling(window=period, min_periods=1).mean()\n avg_loss = loss.rolling(window=period, min_periods=1).mean()\n \n rs = avg_gain / avg_loss\n rsi = 100 - (100 / (1 + rs))\n \n return rsi"}, "XEMA": {"parameters": {"short_period": 14, "long_period": 20}, "names": ["Crossing EMA", "XEMA"], "code": "\"\"\"\n @legend: XEMA($ticker)\n @name: Crossing EMA|XEMA\n\"\"\"\n\ndef calculate_ema(df, column, period):\n return df[column].ewm(span=period, adjust=False).mean()\n\ndef main(df, short_period=14, long_period=20):\n short_ema = calculate_ema(df, 'Close', short_period)\n long_ema = calculate_ema(df, 'Close', long_period)\n xema = short_ema - long_ema\n return xema"}, "EMA": {"parameters": {"period": 14}, "names": ["Exponential Moving Average", "EMA"], "code": "\"\"\"\n @legend: EMA($ticker)\n @name: Exponential Moving Average|EMA\n\"\"\"\n\ndef main(df, period=14):\n return df['Close'].ewm(span=period, adjust=False).mean()"}, "Bol": {"names": ["Bollinger Bands"], "code": "\"\"\"\n @legend: Bol($ticker)\n @name: Bollinger Bands\n @description: use sophisticated stochastic methods to model development.\n\"\"\"\ndef main(df,period=20, num_std=1.5):\n df['rolling_mean'] = df['Close'].rolling(window=period).mean()\n df['upper_band'] = df['rolling_mean'] + (df['Close'].rolling(window=window).std() * num_std)\n df['lower_band'] = df['rolling_mean'] - (df['Close'].rolling(window=period).std() * num_std)\n\n highZ = df['upper_band'].tolist()\n lowZ = df['lower_band'].tolist()\n\n return [{'values': highZ,'color':'red'},{'values': lowZ,'color':'green'}]", "parameters": {"period": "20", "num_std": "1.5"}, "description": "use sophisticated stochastic methods to model development."}}