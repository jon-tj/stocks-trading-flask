{"SMA": {"type": "indicator", "names": ["Simple Moving Average", "SMA"], "code": "\"\"\"\n @legend: SMA($ticker)\n @name: Simple Moving Average|SMA\n @description: Mean of rolling window\n\"\"\"\ndef main(df,period=5):\n return df['Close'].rolling(window=period).mean()", "parameters": {"period": "5"}, "description": "Mean of rolling window"}, "RSI": {"names": ["Relative Strength Index", "RSI"], "code": "\"\"\"\n @legend: RSI($ticker)\n @name: Relative Strength Index|RSI\n\"\"\"\ndef main(df,period=14):\n    delta = df['Close'].diff()\n    gain = delta.where(delta > 0, 0)\n    loss = -delta.where(delta < 0, 0)\n    avg_gain = gain.rolling(window=period, min_periods=1).mean()\n    avg_loss = loss.rolling(window=period, min_periods=1).mean()\n \n    rs = avg_gain / avg_loss\n    rsi = 100 - (100 / (1 + rs))\n \n    return {'values':rsi,'target':'0-100'}", "parameters": {"period": "14"}, "type": "indicator"}, "XEMA": {"type": "indicator", "parameters": {"short_period": 14, "long_period": 20}, "names": ["Crossing EMA", "XEMA"], "code": "\"\"\"\n @legend: XEMA($ticker)\n @name: Crossing EMA|XEMA\n\"\"\"\n\ndef calculate_ema(df, column, period):\n return df[column].ewm(span=period, adjust=False).mean()\n\ndef main(df, short_period=14, long_period=20):\n short_ema = calculate_ema(df, 'Close', short_period)\n long_ema = calculate_ema(df, 'Close', long_period)\n xema = short_ema - long_ema\n return xema"}, "EMA": {"type": "indicator", "parameters": {"period": 14}, "names": ["Exponential Moving Average", "EMA"], "code": "\"\"\"\n @legend: EMA($ticker)\n @name: Exponential Moving Average|EMA\n\"\"\"\n\ndef main(df, period=14):\n return df['Close'].ewm(span=period, adjust=False).mean()"}, "Bol": {"type": "indicator", "names": ["Bollinger Bands"], "code": "\"\"\"\n @legend: Bol($ticker)\n @name: Bollinger Bands\n @description: use sophisticated stochastic methods to model development.\n\"\"\"\ndef main(df,period=20, num_std=1.5):\n df['rolling_mean'] = df['Close'].rolling(window=period).mean()\n df['upper_band'] = df['rolling_mean'] + (df['Close'].rolling(window=period).std() * num_std)\n df['lower_band'] = df['rolling_mean'] - (df['Close'].rolling(window=period).std() * num_std)\n\n highZ = df['upper_band'].tolist()\n lowZ = df['lower_band'].tolist()\n\n return [{'values': highZ,'color':'red'},{'values': lowZ,'color':'green'}]", "parameters": {"period": "20", "num_std": "1.5"}, "description": "use sophisticated stochastic methods to model development."}, "Cloud": {"type": "indicator", "names": ["Ichimoku Cloud", "IMC"], "code": "\"\"\"\n @legend: Cloud($ticker)\n @name: Ichimoku Cloud|IMC\n @description: Provides insight into trend direction, support and resistance levels, and potential reversal points\n\"\"\"\ndef main(df, tenkan=9, kijun=26, senkou=52):\n df['TenkanSen'] = (df['High'].rolling(window=tenkan).max() + df['Low'].rolling(window=tenkan).min()) / 2\n df['KijunSen'] = (df['High'].rolling(window=kijun).max() + df['Low'].rolling(window=kijun).min()) / 2\n \n return [\n {'legend':'Tenkan','values':df['TenkanSen'],'color':'#517AFF'},\n {'legend':'Kijun','values':df['KijunSen'],'color':'red'},\n {'legend':'Senkou Span A','values':((df['TenkanSen'] + df['KijunSen']) / 2).shift(kijun),'color':'#90BA93'},\n {'legend':'Senkou Span B','values':(df['High'].rolling(window=senkou).max() + df['Low'].rolling(window=senkou).min()) / 2,'color':'#D9878B'},\n {'legend':'Chikou Span','values':df['Close'].shift(-tenkan),'color':'#518B53'},\n {'fill_between':['Senkou Span A','Senkou Span B']}\n ]", "parameters": {"tenkan": "9", "kijun": "26", "senkou": "52"}, "description": "Provides insight into trend direction, support and resistance levels, and potential reversal points"}, "Momentum Strategy": {"names": ["Momentum Strategy"], "code": "\"\"\"\n(remove @ to suppress output)\n@--equity\n@--returns\n@name: Momentum Strategy\n@legend: Momentum Strategy\n\n@test-days: 2000\n@define:\n. BUY 1\n. SELL -1\n. HOLD 0\n. _close df['Close']\n. close df['Close'][i]\n\"\"\" \n\ndef main(df,i):\n    if i<1: return HOLD\n    if _close[i]<_close[i-3]:\n        return BUY\n    else:\n        return SELL", "parameters": {"i": 0}, "type": "strategy"}, "Hold": {"type": "strategy", "names": ["Hold"], "code": "\"\"\"\n(remove @ to suppress output)\n@--equity\n@--returns\n@name: Hold\n@legend: Hold\n\n@test-days: 2000\n@define:\n. BUY 1\n\"\"\" \n\ndef main(df,i):\n return BUY", "parameters": {"i": 0}}}